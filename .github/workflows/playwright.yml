name: Playwright Test Suite

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  API_PORT: 8001
  API_DOMAIN: 0.0.0.0
  CONTAINER_NAME: monk_backend_container
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.11'

jobs:
  e2e-tests:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Python dependencies
      run: |
        pip install playwright==1.42.0
        playwright install chromium

    - name: Build Docker image
      run: docker build -t monk_backend ./backend/api

    - name: Run Docker container
      run: |
        docker run -d \
          -p ${{ env.API_PORT }}:8001 \
          -e API_DOMAIN=http://${{ env.API_DOMAIN }}:${{ env.API_PORT }} \
          -e HCP_CLIENT_ID=${{ secrets.HCP_CLIENT_ID }} \
          -e HCP_CLIENT_SECRET=${{ secrets.HCP_CLIENT_SECRET }} \
          -e HCP_ORG_ID=${{ secrets.HCP_ORG_ID }} \
          -e HCP_PROJECT_ID=${{ secrets.HCP_PROJECT_ID }} \
          -e HCP_PROJECT_NAME=${{ secrets.HCP_PROJECT_NAME }} \
          --name ${{ env.CONTAINER_NAME }} \
          --network host \
          monk_backend

    - name: Validate container
      run: |
        echo "Using API port: ${{ env.API_PORT }}"
        echo "Accessing domain: http://${{ env.API_DOMAIN }}:${{ env.API_PORT }}"
        docker ps --filter "name=${{ env.CONTAINER_NAME }}"

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install pnpm
      run: npm install -g pnpm

    - name: Install frontend dependencies
      working-directory: ./frontend
      run: pnpm install

    - name: Run Playwright tests
      working-directory: .
      env:
        API_DOMAIN: http://${{ env.API_DOMAIN }}:${{ env.API_PORT }}
      run: pnpm exec playwright test

    - name: Cleanup
      if: always()
      run: |
        docker stop ${{ env.CONTAINER_NAME }} || true
        docker rm ${{ env.CONTAINER_NAME }} || true
