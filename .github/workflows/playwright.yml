name: Playwright Test Suite

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  API_PORT: 8001
  API_BASE_URL: 0.0.0.0
  BACKEND_CONTAINER_NAME: monk_backend_container
  FRONTEND_CONTAINER_NAME: monk_frontend_container
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.11'
  WEBSITE_DOMAIN: 0.0.0.0:3000
  INSTALL_DOMAIN: 0.0.0.0:3000
  FRONTEND_PORT: 3000
  
jobs:
  e2e-tests:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker
      uses: docker/setup-buildx-action@v3

    - name: Build Backend Docker image
      run: docker build -t monk_backend ./backend/api

    - name: Run Backend Docker container
      run: |
        docker run -d \
          -p ${{ env.API_PORT }}:8001 \
          -e BASE_URL=${{ env.API_BASE_URL }} \
          -e FASTAPI_PORT=${{ env.API_PORT }} \
          -e WEBSITE_DOMAIN=${{ env.WEBSITE_DOMAIN }} \
          -e API_DOMAIN=http://${{ env.API_BASE_URL }}:${{ env.API_PORT }} \
          -e INSTALL_DOMAIN=${{ env.WEBSITE_DOMAIN }} \
          -e HCP_CLIENT_ID=${{ secrets.HCP_CLIENT_ID }} \
          -e HCP_CLIENT_SECRET=${{ secrets.HCP_CLIENT_SECRET }} \
          -e HCP_ORG_ID=${{ secrets.HCP_ORG_ID }} \
          -e HCP_PROJECT_ID=${{ secrets.HCP_PROJECT_ID }} \
          -e HCP_PROJECT_NAME=${{ secrets.HCP_PROJECT_NAME }} \
          --name ${{ env.BACKEND_CONTAINER_NAME }} \
          monk_backend

    - name: Add delay to ensure server is ready
      run: sleep 10

    - name: Validate container
      run: |
        echo "Using API port: ${{ env.API_PORT }}"
        echo "Accessing domain: http://${{ env.API_BASE_URL }}:${{ env.API_PORT }}"
        docker ps --filter "name=${{ env.BACKEND_CONTAINER_NAME }}"

    - name: Build Frontend Docker image
      working-directory: ./frontend
      run: docker build -t monk_frontend .

    - name: Run Frontend Docker container
      working-directory: ./frontend
      run: docker run -d \
       -e VITE_API_DOMAIN=${{ env.API_BASE_URL }}:${{ env.API_PORT }} \
       -e VITE_WEBSITE_DOMAIN=${{ env.WEBSITE_DOMAIN }} \
       -p ${{ env.FRONTEND_PORT }}:${{ env.FRONTEND_PORT }} \
       --name ${{ env.FRONTEND_CONTAINER_NAME }} \
       monk_frontend

    - name: Add delay to ensure server is ready
      run: sleep 10

    - name: Validate container
      working-directory: ./frontend
      run: |
        echo "Using API port: ${{ env.API_PORT }}"
        echo "Accessing domain: http://${{ env.WEBSITE_DOMAIN }}:${{ env.FRONTEND_PORT }}"
        docker ps --filter "name=${{ env.FRONTEND_CONTAINER_NAME }}"

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install pnpm
      run: npm install -g pnpm

    - name: Install frontend dependencies
      working-directory: ./frontend
      run: pnpm install

    - name: Install Playwright browsers
      run: pnpm exec playwright install chromium

    - name: Debug backend network
      run: |
        echo "Checking network status..."
        docker logs ${{ env.BACKEND_CONTAINER_NAME }}
        docker inspect ${{ env.BACKEND_CONTAINER_NAME }}
        netstat -tulpn | grep ${{ env.API_PORT }}

    - name: check backend api is running using curl
      run: |
        # Try accessing through docker network first
        container_ip=$(docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' ${{ env.BACKEND_CONTAINER_NAME }})
        echo "Container IP: $container_ip"
        max_attempts=5
        attempt=1
        while [ $attempt -le $max_attempts ]; do
          echo "Attempt $attempt of $max_attempts"
          response=$(curl -v -s -w "\n%{http_code}" http://${container_ip}:${{ env.API_PORT }}/docs)
          status_code=$(echo "$response" | tail -n1)
          echo "Received status code: $status_code"
          if [ "$status_code" = "200" ]; then
            echo "Backend API is running successfully"
            exit 0
          fi
          echo "Backend API check failed with status code: $status_code"
          echo "Response body:"
          echo "$response" | sed '$d'
          sleep 5
          attempt=$((attempt + 1))
        done
        echo "Backend API failed to respond after $max_attempts attempts"
        exit 1

    - name: Do Auth Setup
      working-directory: .
      run: |
        container_ip=$(docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' ${{ env.FRONTEND_CONTAINER_NAME }})
        echo "Container IP: $container_ip"
        WEBSITE_DOMAIN=${container_ip}:${{ env.FRONTEND_PORT }}
        # this will store the credetials for other tests
        TEST_GOOGLE_USERNAME=${{ secrets.TEST_GOOGLE_USERNAME }}
        TEST_GOOGLE_PASSWORD=${{ secrets.TEST_GOOGLE_PASSWORD }}
        WEBSITE_DOMAIN=${container_ip}:${{ env.FRONTEND_PORT }}
        pnpm run test:auth

    - name: Run backend tests
      working-directory: .

      run: |
        container_ip=$(docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' ${{ env.BACKEND_CONTAINER_NAME }})
        echo "Container IP: $container_ip"
        
        API_DOMAIN="http://${container_ip}:${{ env.API_PORT }}" pnpm run test:backend

    - name: Run frontend tests
      working-directory: ./
      run: |
        container_ip=$(docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' ${{ env.FRONTEND_CONTAINER_NAME }})
        echo "Container IP: $container_ip"
        WEBSITE_DOMAIN=${container_ip}:${{ env.FRONTEND_PORT }}
        pnpm run test:frontend

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: playwright-results
        path: playwright-report/

    - name: Cleanup
      if: always()
      run: |
        docker stop ${{ env.BACKEND_CONTAINER_NAME }} || true
        docker rm ${{ env.BACKEND_CONTAINER_NAME }} || true
        docker stop ${{ env.FRONTEND_CONTAINER_NAME }} || true
        docker rm ${{ env.FRONTEND_CONTAINER_NAME }} || true
