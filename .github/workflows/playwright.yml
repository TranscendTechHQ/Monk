name: Playwright Test Suite

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.11'
  
jobs:
  e2e-tests:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        install: true
        
    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Create .env file
      run: |
        cat > .env << 'EOF'
        HCP_ORG_ID=${{ secrets.HCP_ORG_ID }}
        HCP_PROJECT_ID=${{ secrets.HCP_PROJECT_ID }}
        HCP_CLIENT_ID=${{ secrets.HCP_CLIENT_ID }}
        HCP_CLIENT_SECRET=${{ secrets.HCP_CLIENT_SECRET }}
        HCP_PROJECT_NAME=${{ secrets.HCP_PROJECT_NAME }}
        BASE_URL=0.0.0.0
        FASTAPI_PORT=8001
        WEBSITE_DOMAIN=https://localhost
        INSTALL_DOMAIN=https://localhost
        API_DOMAIN=https://localhost
        
        VITE_API_DOMAIN=https://localhost
        VITE_WEBSITE_DOMAIN=https://localhost
        VITE_SUPERTOKENS_API_BASE_PATH=/api/auth
        VITE_SUPERTOKENS_WEBSITE_BASE_PATH=/auth
        VITE_SUPERTOKENS_APP_NAME=Monk
        VITE_API_BASE=/api
        TEST_GOOGLE_USERNAME=${{ secrets.TEST_GOOGLE_USERNAME }}
        TEST_GOOGLE_PASSWORD=${{ secrets.TEST_GOOGLE_PASSWORD }}
        EOF

    - name: Build backend image with cache
      uses: docker/build-push-action@v5
      with:
        context: ./backend/api
        file: ./backend/api/Dockerfile
        push: false
        load: true
        tags: monk-backend:latest
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

    # Move cache to prevent it from growing indefinitely
    - name: Move cache
      run: |
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache

    - name: Start app with docker-compose
      run: |
        docker compose up cert-gen frontend nginx --build -d
        docker compose up backend -d
        echo "Waiting for services to start..."
        sleep 60

    - name: Check services status
      run: |
        docker compose ps
        echo "Checking Nginx..."
        curl -k https://nginx/api/healthcheck || echo "Health check failed"

    - name: Run tests
      run: |
        docker compose up tests --build -d
        sleep 60
        echo 'tests completed. exit code is $?'

    - name: Cleanup
      if: always()
      run: |
        docker compose down -v
